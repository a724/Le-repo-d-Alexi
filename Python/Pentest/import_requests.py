# Importation des bibliothèques nécessaires
import requests  # Pour faire des requêtes HTTP
import socket  # Pour la connexion réseau
import ssl  # Pour les opérations liées à SSL
from bs4 import BeautifulSoup  # Pour analyser le contenu HTML
from reportlab.lib.pagesizes import letter  # Pour définir la taille de la page du rapport PDF
from reportlab.pdfgen import canvas  # Pour générer le rapport PDF

# Définition des constantes
TARGET_URL = "http://example.com"  # URL du site à analyser
TARGET_IP = "192.168.1.1"  # Adresse IP pour la vérification SSL
REPORT_FILE = "pentest_report.pdf"  # Nom du fichier de rapport PDF

# Fonction pour collecter les informations du site web cible
def gather_information(target_url):
    try:
        response = requests.get(target_url)  # Envoie une requête GET à l'URL cible
        soup = BeautifulSoup(response.text, 'html.parser')  # Analyse la réponse HTML
        return soup.title.text if soup.title else "No title found"  # Retourne le titre du site web, si disponible
    except requests.RequestException as e:
        return f"Error gathering information: {e}"  # Gère les exceptions liées aux requêtes HTTP

# Fonction pour vérifier la version du certificat SSL de l'adresse IP cible
def check_ssl_cert(target_ip):
    try:
        context = ssl.create_default_context()  # Crée un contexte SSL par défaut
        with socket.create_connection((target_ip, 443)) as sock:  # Établit une connexion TCP à l'adresse IP sur le port 443
            with context.wrap_socket(sock, server_hostname=target_ip) as ssock:  # Englobe la connexion TCP dans un contexte SSL
                return ssock.version()  # Retourne la version du certificat SSL
    except Exception as e:
        return f"SSL check error: {e}"  # Gère les exceptions liées à la vérification SSL

# Fonction pour générer un rapport PDF avec les informations collectées
def generate_report(filename, data):
    c = canvas.Canvas(filename, pagesize=letter)  # Crée un objet canvas pour le dessin du rapport PDF
    c.drawString(100, 750, "Pentest Report")  # Ajoute le titre du rapport
    c.drawString(100, 730, f"Target URL: {TARGET_URL}")  # Affiche l'URL cible
    c.drawString(100, 710, f"SSL Certificate Version: {data['ssl_cert']}")  # Affiche la version du certificat SSL
    c.drawString(100, 690, f"Website Title: {data['web_title']}")  # Affiche le titre du site web
    c.save()  # Sauvegarde le rapport PDF

# Fonction principale orchestrant les opérations
def main():
    web_title = gather_information(TARGET_URL)  # Collecte le titre du site web
    ssl_cert = check_ssl_cert(TARGET_IP)  # Vérifie la version du certificat SSL
    
    # Prépare les données pour le rapport
    data = {
        "web_title": web_title,
        "ssl_cert": ssl_cert
    }

    generate_report(REPORT_FILE, data)  # Génère le rapport PDF
    print(f"Report generated: {REPORT_FILE}")  # Affiche un message indiquant que le rapport a été généré

# Point d'entrée du script, exécute la fonction principale si le script est exécuté directement
if __name__ == "__main__":
    main()
